% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model_service.R
\name{service}
\alias{service}
\title{Code that allows scoring against a model.}
\usage{
service(payload_json64enc)
}
\arguments{
\item{payload_json64enc}{This is a base64 encoded string of a JSON string that can be destructured and cast to R objects and variables.}

\item{x}{Numeric.  Input data in which we need to find outleirs and replace them with NA.}

\item{na.rm}{Boolean.  When na.rm is TRUE code does not consider NA values in x. Code takes values without NA's. If Na's are present in data always put na.rm = TRUE.}

\item{parameters}{List.  Of same structure as in input JSON 'parameter' object.  Parameters used in computations, fed in to main function.}

\item{input_data}{DataFrame.  InputData is one dimensional array of current cycle}

\item{parameters}{We need some of the predefined variables from parameters for checkLinearity function - model_filter_window_size,model_regression_min_run,model_eigen_threshold}

\item{input_data}{inputdata is cycle data up to currentIndex}

\item{parameters}{We need some of the predefined variables from parameters for checkLinearity code - fitersize,minimumNoOfDaysDataForModel,model_eigen_threshold    and model_linear_trend_deviate_count}

\item{input_data}{inputdata is cycle data up to currentIndex (from fist day to current time stamp)}
}
\value{
a base64 encoded JSON structure.
Remove outliers.

Code that will set outlier values to NA values.

This function takes an one dimensional array and find the location of
outliers which are below M percentile-inter quantile range and above
N percentile + inter quantile range). These values are replaced with NA
(Here M=0.1 and N=0.9)

Qunatile first sort the input data after ignoring NAs. Then 'q' quantile
value in data x of size 'N' is given by value at q(N+1) position in data
x. If quantile is between the i and jth observation, x[i] and x[j], and
can be estimated by x[i] + (x[j] - x[i]) times (q*(N+1) - j). Once
quantile values are computed, then we compute inter quantile range that is
difference between values at M and N quantiles. In next step we replace
values less than M quantile value minus inter quantile range with NAs and
also replace values greater than N quantile value minus inter quantile
range with NAs

y code output size is same as input x and wherever outliers are present, they are replaced by NA
Remove high-frequency noise.

This smooths data and removes high-frequency noise from data.

This function is used to remove hig frequency noise using mean filtering
and remove speckle noise using median filter

This function takes one dimensional array data. Then we check for missing
values. If there any missing values then we remove them from data and
smooth the data. then we replace missing values in their positions in
original data  and smoothed data in the original positions of unsmoothed
data. incase the model_do_interpolation     is TRUE, then we use linear interpolation
to fill the missing data.

input_data - this gets changed only when there are missing values otherwise it is same as original data
Check linearity of data.

Checks the linearity of a 1D array of time series data.

checkLinearity function takes one dimensional array check whether the data is linear
or not. If data is linear it gives slope and intecept of linear line
otherwise it returns NAs in place of slope and intercept.

checkLinearity function takes complete input data up to current time stamp (or
currentIndex) and then remove outliers. Next remove non-linear noise using
median filtering and high frequency noise using mean filtering. Compute the
eigen values of the filtered data by using their index values and filtered
data. We get 2 eigen values here as data and idex values fom 2 dimensional
array. For linear line first eigen value is always high and second value
is very small. In our case we put threshold on second eigen value. If
second eigen value is greater than model_eigen_threshold    then data is not following
linear trend. At the same time we check whether data is showing positive
trend (positive slope). If it shows negative slope then we don't fit line
to that data

The values of the vector in the returned value are:
   slope for linear fit whenever length of valid data greater than parameters$minimumNoOfDaysDataForModel otherwise slope is NAN
   
   intercept for linear whenever length of valid data greater than parameters$minimumNoOfDaysDataForModel otherwise slope is NAN
   
   model_linear_trend_deviate_count is zero whenever linear fit has positive slope and second eigen value is less than parameters$model_eigen_threshold otherwise model_linear_trend_deviate_count keeps on incrementing by one
   
   last_valid_line_slope is slope of last valid line.
   
   last_valid_line_intercept is intecept of last valid line.
   
   outlier_removed_nabt is NABT value after applying outlier removal

vector of values, discussed in documentation.
Piece-wise linear segment fit

This function takes paramters and current batch data (from starting of cycle to current time stamp).It gives us the line parameters as ouput.
It sends data to checkLinearity function and get the linear fit details
when we start analysing data for linearity after break point, initally data is not sufficient for linear fit. At this time we use previous line as valid line 
when model_linear_trend_deviate_count is greater than model_linear_trend_run_threshold value then it is assumed that data is no longer linear and we reached break point. We reset model_linear_trend_deviate_count to zero and store all parameters of line just before break point

TODO Mahesh: ... and does what with it?  Add more documentation.

Parameters used:

  model_linear_trend_deviate_count  incremented if data is not linear
  
  last_valid_line_slope is updated once linear line break point is reached or model_linear_trend_deviate_count  is greater than model_linear_trend_run_threshold 
  
  last_valid_line_intercept is updated once linear line break point is reached or model_linear_trend_deviate_count  is greater than model_linear_trend_run_threshold 
  
  line_segment_start_index is set to starting index. Starting index changes when new line segment starts or whenevermodel_linear_trend_deviate_count  is greater than model_linear_trend_run_threshold     
  
  last_valid_line_start_timestamp stores last valid line segment start stamp
  
  last_valid_line_end_timestamp stores last valid line segment end stamp
  
  line_segment_start_index stores spatial index of current line segment start point in the given cycle data
 
 Return values:
 
   intercept - Intercept of current valid line segment. This value is same as last_valid_line_intercept, if there is not enough data for fitting new line segment
   
   slope - Slope of current valid line segment. This value is same as last_valid_line_slope, if there is not enough data for fitting new line segment
   
   valid_line_segment_index -  Gives the valid line segment index
   
   valid_line_start_timestamp      valid line start timestamp 
   
   valid_line_end_timestamp valid line end timestamp 
   
   line_segment_start_timestamp start time stamp of data taken for current line segment fitting
   
   line_segment_end_timestamp end time stamp of data taken for current line segment fitting
   
   filtered_nabt_value - storage for NABT values after checking the filtering conditions based on process parameters
   
   outlier_removed_nabt - storage for NABT values after checking for outlier condition

vector of values
}
\description{
This is the function that is deployed against an endpoint
and returns a base64 encoded json string with the resulting score of
whether or not the pipe is clogged.
}
